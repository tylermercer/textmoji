---
import Layout from "../layouts/Base.astro";
---

<Layout
  title="Textmoji Generator"
  description="Generate a textmoji with a custom text, text color, background color, and border style."
>
  <main class="u-guttered l-column l-space-l">
    <h1>Textmoji Generator</h1>
    <form id="textmojiForm" class="l-column l-space-s">
      <label>
        Text
        <input type="text" id="text" name="text" required value="Your text here" />
      </label>
      <details>
        <summary>Presets</summary>
        <ul>
          <li>
            <a
              data-preset="true"
              href="?textColor=%2356f0c2&bgColor=%230b5265&borderStyle=none&borderColor=%2356f0c2"
              >Oceanic (Default)</a
            >
          </li>
          <li>
            <a
              data-preset="true"
              href="?textColor=%23ff3b3b&bgColor=%23ffe600&borderStyle=all&borderColor=%23ff9500"
              >Bright & Playful</a
            >
          </li>
          <li>
            <a
              data-preset="true"
              href="?textColor=%23ffffff&bgColor=%23000000&borderStyle=topBottom&borderColor=%23808080"
              >Cool & Modern</a
            >
          </li>
          <li>
            <a
              data-preset="true"
              href="?textColor=%23ff00ff&bgColor=%23000080&borderStyle=topBottom&borderColor=%2300ffff"
              >Cyberpunk Neon</a
            >
          </li>
          <li>
            <a
              data-preset="true"
              href="?textColor=%23606060&bgColor=%23f0f0f0&borderStyle=none&borderColor=%23d0d0d0"
              >Minimalist Pastel</a
            >
          </li>
          <li>
            <a
              data-preset="true"
              href="?textColor=%23ffcc00&bgColor=%231a1a1a&borderStyle=all&borderColor=%23ff3300"
              >Retro Arcade</a
            >
          </li>
        </ul>
      </details>
      <div class="colors l-switcher">
        <label>
          Text Color
          <input type="color" id="textColor" name="textColor" value="#56f0c2" />
        </label>

        <label>
          Background Color
          <input type="color" id="bgColor" name="bgColor" value="#0b5265" />
        </label>
      </div>

      <div class="borders l-switcher">
        <label>
          Border Style
          <select id="borderStyle" name="borderStyle">
            <option value="none">None</option>
            <option value="topBottom">Top and Bottom</option>
            <option value="all">All Sides</option>
          </select>
        </label>
        <label>
          Border Color
          <input
            type="color"
            id="borderColor"
            name="borderColor"
            value="#56f0c2"
          />
        </label>
      </div>
    </form>

    <div class="preview">
      <canvas id="textmojiCanvas" width="128" height="128"></canvas>
      <a id="downloadLink" download style="display: none;">Download Textmoji</a>
    </div>
  </main>
  <footer class="u-guttered">
    <p>Built by <a href="https://tylermercer.net">Tyler Mercer</a>. Source on <a href="https://github.com/tylermercer/textmoji">GitHub</a>. Got an idea for how this could be improved? <a href="https://github.com/tylermercer/textmoji/fork">Fork the repo and submit a PR!</a></p>
  </footer>
</Layout>

<style>
  .colors,
  .borders {
    --l-switcher-threshold: 10rem;
  }
  canvas {
    border: 1px solid white;
  }
  .preview {
    display: flex;
    flex-direction: column;
    align-items: center;
  }
</style>

<script>
  import { CanvasTextWrapper } from "canvas-text-wrapper";
  const form = document.getElementById("textmojiForm") as HTMLFormElement;
  const canvas = document.getElementById("textmojiCanvas") as HTMLCanvasElement;
  const ctx = canvas.getContext("2d") as CanvasRenderingContext2D;
  const downloadLink = document.getElementById(
    "downloadLink",
  ) as HTMLAnchorElement;

  function generateTextmoji(
    text: string,
    textColor: string,
    bgColor: string,
    borderColor: string,
    borderStyle: "none" | "topBottom" | "all",
  ) {
    // Clear canvas
    ctx.fillStyle = bgColor;
    ctx.fillRect(0, 0, 128, 128);

    // Draw border if needed
    ctx.strokeStyle = borderColor;
    ctx.lineWidth = 12;

    if (borderStyle === "topBottom") {
      ctx.beginPath();
      ctx.moveTo(0, 2);
      ctx.lineTo(128, 2);
      ctx.moveTo(0, 126);
      ctx.lineTo(128, 126);
      ctx.stroke();
    } else if (borderStyle === "all") {
      ctx.strokeRect(2, 2, 124, 124);
    }

    // Draw text
    ctx.fillStyle = textColor;
    ctx.textRendering = "geometricPrecision";
    CanvasTextWrapper(canvas, text, {
      textAlign: "center",
      verticalAlign: "middle",
      sizeToFill: true,
      paddingX: 6 + (borderStyle === "all" ? 6 : 0),
      paddingY: 6 + (borderStyle !== "none" ? 6 : 0),
      font: "bold 64px Inter, Roboto, 'Helvetica Neue', 'Arial Nova', 'Nimbus Sans', Arial, sans-serif",
      renderHDPI: false,
    });

    // Update download link
    const dataUrl = canvas.toDataURL("image/png");
    downloadLink.href = dataUrl;
    downloadLink.download = `${text.toLowerCase().replace(/\s+/g, "-")}.png`;
    downloadLink.style.display = "inline-block";
    downloadLink.textContent = "Download Textmoji";
  }

  const update = () => {
    const formData = new FormData(form);

    generateTextmoji(
      formData.get("text") as string,
      formData.get("textColor") as string,
      formData.get("bgColor") as string,
      formData.get("borderColor") as string,
      formData.get("borderStyle") as "none" | "topBottom" | "all",
    );
  };

  form.addEventListener("input", (e) => {
    update();
    const formData = new FormData(form);
    formData.delete("text");
    const search = new URLSearchParams(
      formData as unknown as Record<string, string>,
    ).toString();
    history.replaceState(null, "", `?${search}`);
  });

  // Generate initial preview
  const loadFromSearchParams = () => {
    const search = new URLSearchParams(window.location.search);
    if (search.has("textColor")) {
      form
        .querySelector('input[name="textColor"]')
        ?.setAttribute("value", search.get("textColor") || "");
    }
    if (search.has("bgColor")) {
      form
        .querySelector('input[name="bgColor"]')
        ?.setAttribute("value", search.get("bgColor") || "");
    }
    if (search.has("borderColor")) {
      form
        .querySelector('input[name="borderColor"]')
        ?.setAttribute("value", search.get("borderColor") || "");
    }
    if (search.has("borderStyle")) {
      const borderStyle = form.querySelector('select[name="borderStyle"]');
      if (borderStyle instanceof HTMLSelectElement) {
        borderStyle.value = search.get("borderStyle") || "none";
      }
    }
  };

  loadFromSearchParams();
  update();

  document.addEventListener("click", (e) => {
    // Use replacestate for preset clicks
    if (e.target instanceof HTMLAnchorElement && e.target.dataset.preset) {
      const search = new URLSearchParams(new URL(e.target.href).search);
      history.replaceState(null, "", `?${search.toString()}`);
      loadFromSearchParams();
      update();
      e.preventDefault();
    }
  });
</script>
