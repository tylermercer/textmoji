---
import Layout from '../layouts/Base.astro';
import canvasTextWrapperUrl from "canvas-text-wrapper/canvas-text-wrapper.min.js?url";
---

<Layout
    title="Textmoji Generator"
    description="Generate a textmoji with a custom text, text color, background color, and border style.">
  <script is:inline src={canvasTextWrapperUrl}></script>
    <main class="u-guttered l-column l-space-l">
    <h1>Textmoji Generator</h1>
    <form id="textmojiForm" class="l-column l-space-s">
        <label>
          Text
          <input type="text" id="text" name="text" required value="text" />
        </label>
      <div class="colors l-switcher">
        <label>
          Text Color
          <input type="color" id="textColor" name="textColor" value="#ffffff" />
        </label>
  
          <label>
            Background Color
            <input type="color" id="bgColor" name="bgColor" value="#000000" />
          </label>
      </div>

        <label>
          Border Style
          <select id="borderStyle" name="borderStyle">
            <option value="none">None</option>
            <option value="topBottom">Top and Bottom</option>
            <option value="all">All Sides</option>
          </select>
        </label>
    </form>

    <div class="preview">
      <canvas id="textmojiCanvas" width="128" height="128"></canvas>
      <a id="downloadLink" download style="display: none;">Download Textmoji</a>
    </div>
  </main>
  <footer class="u-guttered">
    <p>Built by <a href="https://tylermercer.net">Tyler Mercer</a>.</p>
  </footer>
</Layout>

<style>
    .colors {
      --l-switcher-threshold: 10rem;
    }
    canvas {
        border: 1px solid white;
    }
    .preview {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
</style>

<script>
  const form = document.getElementById('textmojiForm') as HTMLFormElement;
  const canvas = document.getElementById('textmojiCanvas') as HTMLCanvasElement;
  const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;
  const downloadLink = document.getElementById('downloadLink') as HTMLAnchorElement;

  function generateTextmoji(
    text: string,
    textColor: string,
    bgColor: string,
    borderStyle: 'none' | 'topBottom' | 'all'
  ) {
    // Clear canvas
    ctx.fillStyle = bgColor;
    ctx.fillRect(0, 0, 128, 128);

    // Draw border if needed
    ctx.strokeStyle = textColor;
    ctx.lineWidth = 12;
    
    if (borderStyle === 'topBottom') {
      ctx.beginPath();
      ctx.moveTo(0, 2);
      ctx.lineTo(128, 2);
      ctx.moveTo(0, 126);
      ctx.lineTo(128, 126);
      ctx.stroke();
    } else if (borderStyle === 'all') {
      ctx.strokeRect(2, 2, 120, 120);
    }
    
    // Draw text
    ctx.fillStyle = textColor;
    ctx.textRendering = "geometricPrecision";

    window.CanvasTextWrapper(canvas, text, {
      textAlign: "center",
      verticalAlign: "middle",
      sizeToFill: true,
      paddingX: 6 + (borderStyle === 'all' ? 6 : 0),
      paddingY: 6 + (borderStyle !== 'none' ? 6 : 0),
      font: "bold 64px Inter, Roboto, 'Helvetica Neue', 'Arial Nova', 'Nimbus Sans', Arial, sans-serif",
    });

    // Update download link
    const dataUrl = canvas.toDataURL('image/png');
    downloadLink.href = dataUrl;
    downloadLink.download = `${text.toLowerCase().replace(/\s+/g, '-')}.png`;
    downloadLink.style.display = 'inline-block';
    downloadLink.textContent = 'Download Textmoji';
  }

  const update = () => {
    const formData = new FormData(form);
    
    generateTextmoji(
      formData.get('text') as string,
      formData.get('textColor') as string,
      formData.get('bgColor') as string,
      formData.get('borderStyle') as 'none' | 'topBottom' | 'all'
    );
  };

  form.addEventListener('input', (e) => {
    update();
  });

  // Generate initial preview
  generateTextmoji('text', '#ffffff', '#000000', 'none');
</script>